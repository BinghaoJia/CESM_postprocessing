#! /usr/bin/env python

import json, os
import argparse
import glob

time = {
           'atmos': 'chunits(mean(time_bnds, \"nbnd\"), units=time)',
           'aerosol': 'chunits(mean(time_bnds, \"nbnd\"), units=time)',
           'atmosChem': 'chunits(mean(time_bnds, \"nbnd\"), units=time)',
           'ocean': 'mean(chunits(time_bound, units=time), \"d2\")',
           'ocnBgChem': 'mean(chunits(time_bound, units=time), \"d2\")',
           'seaIce': 'mean(chunits(time_bounds, units=time), \"d2\")',
           'land': 'mean(chunits(time_bounds, units=time), \"hist_interval\")',
           'landIce': 'yeartomonth_time(chunits(time * 365, units=\"days since 0001-01-01\", calendar=\"noleap\"))',
       }
bounds = {
           'atmos': 'time_bnds',
           'aerosol': 'time_bnds',
           'atmosChem': 'time_bnds',
           'ocean': 'time_bound',
           'ocnBgChem': 'time_bound',
           'seaIce': 'time_bounds',
           'land': 'time_bounds',
           'landIce': 'bounds(xxtimebndsxx, bdim=\"hist_interval\")',
       }

comps = {'atmos': 'atm',
           'aerosol': 'atm',
           'atmosChem': 'atm',
           'ocean': 'ocn',
           'ocnBgChem': 'ocn',
           'seaIce': 'ice',
           'land': 'lnd',
           'landIce': 'glc',
       }

cesm_realms = {
        "cam":"atmos",
        "clm2":"land",
        "rtm":"rof",
        "cism":"landIce",
        "pop":"ocean",
        "cice":"seaIce"
}


#===================================================================================================
# Command-line Interface
#===================================================================================================
def cli(argv=None):

    desc = """This tool adds information to the json files created by iconform to fill in the gaps
              between the informaiton that we can retreive from the request and what ultimately 
              needs to be in the final netcdf output files.  This is internal knowledge and specific
              to CESM data."""
    parser = argparse.ArgumentParser(description=desc)

    parser.add_argument('-e', '--extra', default='extra_vars.json', type=str, 
                        help='Filename of json file that contains the extra definitions to use.')

    parser.add_argument('ifiles', metavar='INFILE', nargs='*', type=str, help='String that points to json files generated by pyconform.  Can contain wildcards.')

    return parser.parse_args(argv)

#===================================================================================================
# Main Script Function
#===================================================================================================
def main(argv=None):

    args = cli(argv)
   
    # Get list of inputs 
    ifiles = args.ifiles

    # Get the 'extra' json filename and load it
    efile_base = args.extra

    #ifiles = glob.glob(ifiles_dir+"/*.json")

    # Go through each of the jsons created by iconform that the user wants to modify
    for fn in ifiles:
        fsplit = os.path.basename(fn).split('_')
        freq = fsplit[2]
        realm = fsplit[3]

        # Open and load
        with open(fn) as f:       
            o_dict = json.load(f)
        o_dict_copy = o_dict.copy()

        for var,d1 in o_dict_copy.iteritems():
            if 'input_glob' in d1.keys():
                realm = cesm_realms[d1['input_glob'].split(".")[0]]

        # open extra file
        e_path = os.path.dirname(efile_base)
        e_fn = os.path.basename(efile_base)
        if len(realm)>0:
            extra_file = e_path+"/"+comps[realm]+"_"+e_fn
        else:
            extra_file = e_path+"/"+e_fn
        print fn,extra_file
        with open(extra_file) as e:
            e_dict = json.load(e)

        # Go through the original to find things that we have to add and/or change
        cvar = fn.split("_")[-2]
        cr = fn.split("_")[-3]
        for var,d1 in o_dict_copy.iteritems():
            if "definition" in d1.keys():
                if 'vinth2p' in d1["definition"]:
                    if 'alevel' in d1["definition"]:
                        o_dict[var]["definition"] = o_dict[var]["definition"].replace('alevel','lev')
            if 'landIce' in fn.split("_")[-3] or 'landIce' in fn.split("_")[-4] or 'atmos' in fn.split("_")[-3] or 'aerosol' in fn.split("_")[-3]:
                if 'input_glob' in d1.keys() and "ygre" in o_dict.keys() and "xgre" in o_dict.keys():
                    if 'clm2' in d1['input_glob'].split(".")[0]:
                        o_dict.pop("ygre", None)
                        o_dict.pop("xgre", None)
                        o_dict['latitude'] = e_dict['latitude']
                        o_dict['longitude'] = e_dict['longitude'] 
                        o_dict['latitude_bnds'] = e_dict['latitude_bnds']
                        o_dict['longitude_bnds'] = e_dict['longitude_bnds']
                        for var,d1 in o_dict_copy.iteritems():
                            if cvar in var:
                                o_dict[var]["dimensions"] = [dim.replace("ygre", "latitude") for dim in o_dict[var]["dimensions"]]
                                o_dict[var]["dimensions"] = [dim.replace("xgre", "longitude") for dim in o_dict[var]["dimensions"]]
                    elif 'cism' in d1['input_glob'].split(".")[0]:
                        o_dict['xgre'] = e_dict['xgre']
                        o_dict['ygre'] = e_dict['ygre']
                        o_dict['xgre_bnds'] = e_dict['xgre_bnds']
                        o_dict['ygre_bnds'] = e_dict['ygre_bnds']

            if cvar in var and ('ocean' in cr or 'ocn' in cr):
                if "nlat" in e_dict.keys():
                    o_dict["nlat"] = e_dict["nlat"]
                if "nlon" in e_dict.keys():
                    o_dict["nlon"] = e_dict["nlon"]
            if cvar in var and ('seaIce' in cr):
                if "nj" in e_dict.keys():
                    o_dict["nj"] = e_dict["nj"]
                if "ni" in e_dict.keys():
                    o_dict["ni"] = e_dict["ni"]
            if 'bounds' in d1["attributes"].keys():
                 if d1["attributes"]["bounds"] not in o_dict.keys():
                     if d1["attributes"]["bounds"] in e_dict.keys():
                         o_dict[d1["attributes"]["bounds"]] = e_dict[d1["attributes"]["bounds"]]
                         print "Added ", d1["attributes"]["bounds"]
                 if var == 'time' and len(realm)>0:
                     if 'input_glob' in d1.keys():
                         if 'clm2' in d1['input_glob'].split(".")[0]:
                             o_dict[d1["attributes"]["bounds"]]["definition"] = bounds['land']
                         elif 'cism' in d1['input_glob'].split(".")[0]:
                             o_dict[d1["attributes"]["bounds"]]["definition"] = bounds['landIce']
                         else:
                              o_dict[d1["attributes"]["bounds"]]["definition"] = bounds[realm]
                     else:
                         o_dict[d1["attributes"]["bounds"]]["definition"] = bounds[realm]
            if "alevhalf" in d1["dimensions"] and "alevhalf" != var:
                o_dict[var]["metavars"] = ["ps", "p0", "a", "b"]
                print "Added metavars ps, p0, a, and b to variable, ",var
                if "p0" not in o_dict.keys():
                    o_dict["p0"] = e_dict["p0"]
                    print "Added p0"
                if "a" not in o_dict.keys():
                    o_dict["a"] = e_dict["a"]
                    print "Added a"
                if "a_bnds" not in o_dict.keys():
                    o_dict["a_bnds"] = e_dict["a_bnds"]
                    print "Added a_bnds"
                if "b" not in o_dict.keys():
                    o_dict["b"] = e_dict["b"]
                    print "Added b"
                if "b_bnds" not in o_dict.keys():
                    o_dict["b_bnds"] = e_dict["b_bnds"]
                    print "Added b_bnds"
            if "alevel" in d1["dimensions"] and "alevel" != var:
                o_dict[var]["metavars"] = ["ps", "p0"]
                print "Added metavars ps and p0 to variable, ",var
                if "p0" not in o_dict.keys():
                    o_dict["p0"] = e_dict["p0"]
                    print "Added p0"
            if var == 'time' or var == 'time1' or var == 'time2' or var == 'time3':
                 if 'mon' in freq:
                     if 'input_glob' in d1.keys():
                         if 'clm2' in d1['input_glob'].split(".")[0]:
                             o_dict[var]["definition"] = time['land']
                         elif 'cism' in d1['input_glob'].split(".")[0]:
                             o_dict[var]["definition"] = time['landIce']
                         else:
                             o_dict[var]["definition"] = time[realm]
                     else:
                         o_dict[var]["definition"] = time[realm] 
                 else:
                     o_dict[var]["definition"] = "time"
            if var == 'alevel' or var == 'alevhalf':
                o_dict[var]["attributes"]["units"] = "hPa"
            if var == 'olevel' or var == 'oline':
                o_dict[var]["attributes"]["units"] = "centimeters"
        # Rewrite the file
        with open(fn, 'w') as outfile:
            json.dump(o_dict, outfile, sort_keys=True, indent=4)

    print("FINISHED 2nd WRITE OF JSON FILES")

#===================================================================================================
# Command-line Operation
#===================================================================================================
if __name__ == '__main__':
    main()

