#! /usr/bin/env bash
#
# template to activate the virtualenv, call post process program, deactivate virtualenv
#

{{ batchdirectives }}

if [ ! -e {{ virtualEnvDir }} ]; then
    echo "*************************************************************************************"
    echo "CESM {{ processName }} exiting due to non-existant python virtual environment in"
    echo "    {{ virtualEnvDir }}"
    echo "You must first run:"
    echo "$SRCROOT/postprocessing/create_python_env.sh -machine [machine] -cimeroot [$CIMEROOT]"
    echo "*************************************************************************************"
    exit
fi

{% for module in reset_modules %}
{{ module }}
{% endfor %}

cd {{ virtualEnvDir }}
pwd
. activate

{% for module in modules %}
{{ module }}
{% endfor %}

{% if pythonpath|length > 0 %}
PYTHONPATH={{ pythonpath }}:$PYTHONPATH
export PYTHONPATH
{% endif %}

today="$(date '+%Y%m%d-%H%M%S')"
log_filename={{ caseRoot }}/logs/{{ processName }}.log.$today

echo "******************************************"
echo "Start {{ processName }} generation $(date)"
echo "******************************************"

{% if imb_run %}
{{ imb_env_vars }}

{{ mpirun }} {{ imb_run }} {{ imb_options }} >> ${log_filename} 2>&1

{% elif standalone %}
{{ mpirun|replace("{{ pes }}",pes) }} ./{{ postProcessCmd }} {{ debug }} {{ backtrace }} --caseroot {{ caseRoot }} --standalone {{ cmdl_opt }} >> ${log_filename} 2>&1
{% else %}
{{ mpirun|replace("{{ pes }}",pes) }} ./{{ postProcessCmd }} {{ debug }} {{ backtrace }} --caseroot {{ caseRoot }} >> ${log_filename} 2>&1
{% endif %}

echo "******************************************"
echo "End {{ processName }} generation $(date)"
echo "******************************************"

deactivate
cd {{ caseRoot }}

